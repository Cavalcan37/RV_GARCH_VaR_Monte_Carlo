# Passo 1: Instalação e carregamento dos pacotes
install.packages("quantmod")
install.packages("rugarch")
install.packages("FinTS")
library(quantmod) # Funções 'getSymbols' e 'ROC'
library(rugarch) # Funções 'ugarchspec', 'ugarchfit' e 'sigma'
library(FinTS) # Função 'ArchTest'
# Ensaio Prévio - VWO
getSymbols("VWO", from = "2025-03-01", to = Sys.Date())
chartSeries(VWO, theme = "white", TA = "addVo(); addBBands()")
# Passo 2: Obtenção dos dados do VWO
vwo <- getSymbols("VWO", src = "yahoo", from = "2021-01-01", to = Sys.Date(), auto.assign = FALSE)
vwo <- na.locf(vwo)  # Valores faltantes preenchidos com o último valor válido
# Muinto comum em finanças
vwo
# Passo 3: Calcule os retornos do VWO
retornos_vwo <- na.omit(ROC(Cl(vwo), type = "discrete"))
retornos_vwo
View(retornos_vwo)
################################################
# Salva no Excel para Calculo do Retorno       #
################################################
library(openxlsx)                              #
write.xlsx(retornos_vwo, "retornos_vwo.xlsx")  #
# Renomeia a coluna
colnames(retornos_vwo) <- "Retornos_VWO"
retornos_vwo
################################################################################
# Passo 4: Testar Estacionariedade
# Carregar pacotes necessários
install.packages("tseries")
library(tseries)
# Teste ADF
adf_test <- adf.test(retornos_vwo)       # H0: Série Não Estacionária
print(adf_test)                          # H1: Série Estacionária
# Teste KPSS
kpss_test <- kpss.test(retornos_vwo)     # H0: Série Estacionária
print(kpss_test)                         # H0: Série Não Estacionária
# Passo 5: Análise exploratória
par(mfrow = c(2, 1))
plot(retornos_vwo, main = "Retornos Diários VWO", col = "blue4", lwd = 1)
hist(retornos_vwo, breaks = 25, main = "Distribuição dos Retornos VWO",
xlab = "Retornos", col = "lightgreen",probability = TRUE)
densidade <- density(retornos_vwo)  # Calcula a densidade kernel
lines(densidade, col = "red", lwd = 2)  # Adiciona a curva de densidade ao gráfico
par(mfrow = c(1, 1))
ArchTest(retornos_vwo, lags = 12)
# Passo 6: Especificação do modelo GARCH(1,1) para VWO
especificacao_vwo <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(0, 0), include.mean = TRUE),
distribution.model = "std"  # Distribuição t de Student
)
# Passo 7: Estimação do modelo GARCH(1,1) para VWO
modelo_garch_vwo <- ugarchfit(spec = especificacao_vwo, data = retornos_vwo)
print(modelo_garch_vwo)
# Passo 8: Obtenha a volatilidade estimada para VWO
volatilidade_estimada_vwo <- sigma(modelo_garch_vwo)
volatilidade_estimada_vwo
# Bloco do VWO
par(mfrow = c(2, 1))  # Divide a área de plotagem em 2 linhas e 1 coluna
# Gráfico de cima: Retornos do VWO
plot(retornos_vwo, main = "Retornos Diários VWO", col = "blue4", lwd = 1)
legend("topright",
legend = c("Retornos VWO"),
col = c("blue4"),
lwd = 1,
cex = 0.8,  # Tamanho da legenda
bty = "n")  # Remove a caixa ao redor da legenda
# Gráfico de baixo: Volatilidade estimada do VWO
plot(volatilidade_estimada_vwo, main = "Volatilidade Estimada VWO (GARCH(1,1))", col = "red3", lwd = 2)
legend("topright",
legend = c("Volatilidade VWO"),
col = c("red3"),
lwd = 2,
cex = 0.8,  # Tamanho da legenda
bty = "n")  # Remove a caixa ao redor da legenda
par(mfrow = c(1, 1))
# Passo 10: Previsão de volatilidade para os próximos 30* dias
previsao_volatilidade <- ugarchforecast(modelo_garch_vwo, n.ahead = 30)
print(previsao_volatilidade)
# Passo 11: Plotagem da previsão de volatilidade
plot(previsao_volatilidade, which = 3, main = "Previsão de Volatilidade para os Próximos 30 Dias")
# Definir o nível de confiança (95% é comum)
alpha <- 0.05
# Calcular o VaR para os retornos históricos
# Usando a volatilidade estimada pelo GARCH(1,1) e a distribuição t de Student
# O quantil da distribuição t de Student é obtido com qt()
df <- modelo_garch_vwo@fit$coef["shape"]  # Graus de liberdade da distribuição t
VaR_historico <- volatilidade_estimada_vwo * qt(alpha, df)
# Plotar o VaR histórico sobre os retornos
plot(retornos_vwo, main = "Retornos VWO com VaR (95%)", col = "blue4", lwd = 1)
lines(VaR_historico, col = "red", lwd = 2)
legend("topright",
legend = c("Retornos VWO", "VaR 95%"),
col = c("blue4", "red"),
lwd = c(1, 2),
cex = 0.8,
bty = "n")
# Definir o nível de confiança (95% é comum)
alpha <- 0.05
# Calcular o VaR para 10 dias
# A volatilidade para 10 dias é a volatilidade diária multiplicada pela raiz quadrada de 10
volatilidade_10_dias <- volatilidade_estimada_vwo * sqrt(10)
# Calcular o VaR para 10 dias usando a distribuição t de Student
df <- modelo_garch_vwo@fit$coef["shape"]  # Graus de liberdade da distribuição t
VaR_10_dias <- volatilidade_10_dias * qt(alpha, df)
# Plotar o VaR para 10 dias sobre os retornos
plot(retornos_vwo, main = "Retornos do VWO com VaR (95%) para 10 Dias", col = "blue4", lwd = 1)
lines(VaR_10_dias, col = "red", lwd = 2)
legend("topright",
legend = c("Retornos VWO", "VaR 95% (10 Dias)"),
col = c("blue4", "red"),
lwd = c(1, 2),
cex = 0.8,
bty = "n")
# Value-at-Risk (VaR):
# Passo 14: Extrair a volatilidade estimada pelo modelo GARCH(1,1)
volatilidade_diaria <- as.numeric(tail(volatilidade_estimada_vwo, 1))  # Último valor da volatilidade diária
# Passo 15: Definir o nível de confiança (95% é comum)
alpha <- 0.05
# Passo 16: Calcular o quantil da distribuição t de Student
df <- modelo_garch_vwo@fit$coef["shape"]  # Graus de liberdade da distribuição t
quantil <- qt(alpha, df)  # Quantil para o nível de confiança alpha
# Passo 17: Calcular o VaR para 1 dia
VaR_1_dia <- volatilidade_diaria * quantil
# Passo 18: Calcular o VaR para 10 dias
volatilidade_10_dias <- volatilidade_diaria * sqrt(10)
VaR_10_dias <- volatilidade_10_dias * quantil
# Passo 19: Exibir os resultados
cat("VaR para 1 dia (95% de confiança):", VaR_1_dia, "\n")
cat("VaR para 10 dias (95% de confiança):", VaR_10_dias, "\n")
# LINKEDIN######################################################################
# Plotando Retornos e VaR + GARCH(1,1) abaixo (p/Linkedin)
# Ensaio Prévio - VWO
getSymbols("VWO", from = "2025-03-01", to = Sys.Date())
chartSeries(VWO, theme = "white", TA = "addVo(); addBBands()")
par(mfrow = c(1, 1))
plot(retornos_vwo, main = "Retornos VWO com VaR (95%)", col = "blue4", lwd = 1)
graf <- lines(VaR_historico, col = "red", lwd = 2)
# Gráfico Retornos + VaR
par(mfrow = c(2, 1))
graf
# Gráfico GARCH(1,1)
plot(volatilidade_estimada_vwo, main = "Volatilidade VWO (GARCH(1,1))", col = "red3", lwd = 2)
par(mfrow = c(1, 1))
####### Cálculo do Retorno Médio Geométrico #######
#Carregar pacotes necessários
library(quantmod)
library(PerformanceAnalytics)  # Para funções financeiras avançadas
# Baixar dados do VWO
getSymbols("VWO", src = "yahoo", from = "2020-01-01", to = Sys.Date())
# Calcular retornos diários (usando preços ajustados)
retornos_diarios <- dailyReturn(Ad(VWO), type = "log")  # Retornos logarítmicos
# Remover valores NA (se houver)
retornos_diarios <- na.omit(retornos_diarios)
# Calcular retorno geométrico anualizado
retorno_geometrico_anual <- Return.annualized(retornos_diarios, geometric = TRUE)
retorno_geometrico_anual
# MODELO ARIMA/SARIMA
# Pacotes
library(quantmod)
library(forecast)
library(ggplot2)
library(tseries)
library(seastests)
# Passo 1: Baixar dados
getSymbols("VWO", src = "yahoo", from = "2023-01-01", to = Sys.Date())
serie <- Ad(VWO)
serie <- na.omit(serie)
serie
# Passo 2: Converter para série temporal e sua visualização
par(mfrow = c(1, 1))
serie_ts <- ts(serie, frequency = 5)
serie_ts
plot(serie_ts, main = "ETF Global VWO", xlab = "Dias", ylab = "Cotação (US$)")
# Passo 3: Detecção de Sazonalidade
# 1. Análise gráfica
seasonplot(serie_ts, col = rainbow(12), year.labels = T, type = "o", pch = 16)
decomp.serie_ts<-decompose(serie_ts)
plot(decomp.serie_ts)
# 2. Teste QS de sazonalidade
qs_test <- qs(serie_ts, freq = 5) # H0: Não há Sazonalidade
qs_test                           # H1: Há Sazonalidade
# 3. Função de Autocorrelação (ACF)
acf_plot <- acf(serie_ts, lag.max = 20, main = "ACF do ETF VWO", plot = TRUE)
# Passo 4: Modelagem
modelo <- auto.arima(serie_ts, seasonal = TRUE, stepwise = FALSE)
# Diagnóstico do Modelo
summary(modelo)
checkresiduals(modelo)
# Passo 5: Previsão
previsao <- forecast(modelo, h = 10)
autoplot(previsao, include = 30) +
ggtitle(paste("Previsão VWO")) +
xlab("Data") + ylab("Preço (R$)") +
theme_gray()
# Visualização Alternativa
# Passo 6: Previsão para 10 dias com histórico reduzido
previsao <- forecast(modelo, h = 10)
previsao
# Definir o número de dias históricos a mostrar
n_dias_historicos <- min(30, length(serie_ts))
# Configurações gráficas avançadas
par(
bg = "#f5f5f5",           # Cor de fundo cinza claro
fg = "#333333",           # Cor dos eixos e texto
col.main = "#2c3e50",     # Cor do título (azul escuro)
col.lab = "#2c3e50",      # Cor dos rótulos
font.main = 2,            # Título em negrito
font.lab = 1,             # Rótulos em normal
las = 1,                  # Texto dos eixos na horizontal
mar = c(5, 4, 4, 2) + 0.1 # Margens do gráfico
)
# Plot principal
plot(previsao,
main = paste("Previsão VWO"),
xlab = "Data",
ylab = "Preço (US$)",
flty = 1,               # Linha contínua para previsão
lwd = 2,                # Espessura da linha
fcol = "#e74c3c",       # Vermelho moderno para previsão
col = "#3498db",        # Azul para intervalo
shaded = TRUE,
include = n_dias_historicos,
axes = FALSE)           # Desativar eixos padrão
# Adicionar eixos personalizados
axis(1, col = "#bdc3c7", col.axis = "#2c3e50", cex.axis = 0.9)  # Eixo X
axis(2, col = "#bdc3c7", col.axis = "#2c3e50", cex.axis = 0.9)  # Eixo Y
# Preço atual da ação (último valor real da série)
preco_atual <- as.numeric(tail(serie, 1))
preco_atual
# Preços previstos extraídos do objeto de forecast
precos_previstos <- as.numeric(previsao$mean)
precos_previstos
# Taxa de desconto anual (exemplo: 10%)
taxa_anual <- 0.10
# Conversão da taxa anual para taxa diária (252 dias úteis por ano)
taxa_diaria <- (1 + taxa_anual)^(1 / 252) - 1
taxa_diaria
# Dias correspondentes às previsões
dias <- 1:length(precos_previstos)
dias
# Cálculo dos acréscimos (positivos ou negativos) em relação ao preço atual
ganhos_ou_perdas <- precos_previstos - preco_atual
ganhos_ou_perdas
# Valor presente dos ganhos/perdas esperados
vp_ganhos_ou_perdas <- ganhos_ou_perdas / ((1 + taxa_diaria) ^ dias)
vp_ganhos_ou_perdas
# Valor justo refinado: preço atual + valor presente líquido dos ganhos/perdas
valor_justo_refinado <- preco_atual + sum(vp_ganhos_ou_perdas)
valor_justo_refinado
# Diferença entre valor justo e preço atual
delta_valor <- valor_justo_refinado - preco_atual
delta_valor
# Resultados
cat("Preço atual da ação: US$", round(preco_atual, 2), "\n")
cat("Valor justo estimado (baseado na valorização esperada): US$", round(valor_justo_refinado, 2), "\n")
cat("Diferença: US$", round(delta_valor, 2), "\n")
if (delta_valor > 0) {
cat("→ A ação pode estar SUBVALORIZADA no curto prazo.\n")
} else if (delta_valor < 0) {
cat("→ A ação pode estar SOBREVALORIZADA no curto prazo.\n")
} else {
cat("→ A ação está corretamente precificada de acordo com as expectativas.\n")
}
#####################################
# SIMULAÇÃO ESTATÍSTICA DE CENÁRIOS # versão 1
#####################################
set.seed(123)  # Para reprodutibilidade
#####################################
# SIMULAÇÃO ESTATÍSTICA DE CENÁRIOS # versão 1
#####################################
set.seed(123)  # Para reprodutibilidade
# Preço atual
preco_atual <- as.numeric(tail(serie, 1))
# Previsões base
precos_previstos <- as.numeric(previsao$mean)
dias <- 1:length(precos_previstos)
# Parâmetros da distribuição normal
media <- mean(precos_previstos)
desvio <- sd(precos_previstos)
desvio <- 1.5
# Simulação: gerar 5000 vetores de previsões (um para cada cenário)
n_simulacoes <- 5000
simulacoes <- matrix(rnorm(n_simulacoes * length(precos_previstos), mean = media, sd = desvio),
nrow = n_simulacoes, ncol = length(precos_previstos))
# Taxa de desconto
taxa_anual <- 0.10
taxa_diaria <- (1 + taxa_anual)^(1 / 252) - 1
# Inicializar vetores para armazenar resultados
valores_justos <- numeric(n_simulacoes)
deltas_valor <- numeric(n_simulacoes)
# Loop pelas simulações
for (i in 1:n_simulacoes) {
ganhos_ou_perdas <- simulacoes[i, ] - preco_atual
vp_ganhos <- ganhos_ou_perdas / ((1 + taxa_diaria) ^ dias)
valores_justos[i] <- preco_atual + sum(vp_ganhos)
deltas_valor[i] <- valores_justos[i] - preco_atual
}
# Calcular as médias e desvios
media_vj <- mean(valores_justos)
dp_vj <- sd(valores_justos)
media_delta <- mean(deltas_valor)
dp_delta <- sd(deltas_valor)
# Probabilidades desejadas
prob_vj_4330 <- pnorm(43.30, mean = media_vj, sd = dp_vj)
prob_delta_0 <- pnorm(0, mean = media_delta, sd = dp_delta)
# Intervalos para densidade
x_vj <- seq(min(valores_justos), max(valores_justos), length.out = 1000)
dens_vj <- dnorm(x_vj, mean = media_vj, sd = dp_vj)
x_delta <- seq(min(deltas_valor), max(deltas_valor), length.out = 1000)
dens_delta <- dnorm(x_delta, mean = media_delta, sd = dp_delta)
# Layout com dois gráficos verticais
par(mfrow = c(2, 1), mar = c(4, 4, 2.5, 1))
# 1. Histograma do valor justo refinado ########################################
hist_vj <- hist(valores_justos, breaks = 20, col = "skyblue", border = "black",
main = "Valor VWO",
xlab = "VWO (US$)", freq = FALSE)
lines(x_vj, dens_vj, col = "red", lwd = 2)
abline(v = media_vj, col = "black", lty = 2, lwd = 2)
# Área sombreada para valores < 43.30
x_sombra <- x_vj[x_vj <= 43.30]
y_sombra <- dnorm(x_sombra, mean = media_vj, sd = dp_vj)
polygon(c(x_sombra, rev(x_sombra)), c(y_sombra, rep(0, length(y_sombra))),
col = rgb(1, 0, 0, 0.5), border = NA)
# Texto da probabilidade no gráfico
text(x = 40, y = 0.04,
labels = paste0("Valor VWO < 43,30: ",
round(prob_vj_4330 * 100, 2), "%"),
col = "blue4", cex = 0.9, font = 2)
# Texto da média
text(x = media_vj + 1.5, y = max(dens_vj)*0.9,
labels = paste0("Média = ", round(media_vj, 2)),
col = "black", cex = 0.9, font = 2)
# 2. Histograma do delta valor #################################################
hist_delta <- hist(deltas_valor, breaks = 20, col = "moccasin", border = "black",
main = "Delta VWO",
xlab = "Delta VWO (US$)", freq = FALSE)
lines(x_delta, dens_delta, col = "red", lwd = 2)
abline(v = media_delta, col = "black", lty = 2, lwd = 2)
# Área sombreada para valores < 0
x_sombra2 <- x_delta[x_delta <= 0]
y_sombra2 <- dnorm(x_sombra2, mean = media_delta, sd = dp_delta)
polygon(c(x_sombra2, rev(x_sombra2)), c(y_sombra2, rep(0, length(y_sombra2))),
col = rgb(1, 0, 0, 0.5), border = NA)
# Texto da probabilidade no gráfico
text(x = -5, y = 0.04,
labels = paste0("Delta VWO < 0: ",
round(prob_delta_0 * 100, 2), "%"),
col = "blue4", cex = 0.9, font = 2)
# Texto da média
text(x = media_delta + 1.5, y = max(dens_delta)*0.9,
labels = paste0("Média = ", round(media_delta, 2)),
col = "black", cex = 0.9, font = 2)
